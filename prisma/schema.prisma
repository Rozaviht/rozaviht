generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

//*****Image schema*****
model images {
  id                String              @id @default(uuid())
  url               String              @unique
  alt               String
  height            Int?
  width             Int?
  // An Image can has onyly one Product
  product           products?
  // An Image can has only one Article
  article           articles?           @relation(fields: [articleId], references: [id])
  articleId         String?
  // An Image can has only one ProductCategory
  productCategory   product_categories? @relation(fields: [productCategoryId], references: [id])
  productCategoryId String?

  @@index([id, url])
}

//*****Product schema*****
model products {
  id                String             @id @default(uuid())
  name              String             @unique
  description       String?
  price             Int
  createdAt         DateTime           @default(now()) @map(name: "created_ at")
  modifiedAt        DateTime           @updatedAt @map(name: "modified_at")
  deletedAt         DateTime           @default(now()) @map(name: "deleted_at")
  // An Product can have many Image
  image             images             @relation(fields: [imageId], references: [id])
  imageId           String             @unique
  // A Product can only have one ProductCategory
  productCategory   product_categories @relation(fields: [productCategoryId], references: [id])
  productCategoryId String
  // A Product can only has one ProductInventory
  productInventory  product_inventory?
  // A Product can have many Discounts
  discount          discounts[]
  // A Product can be in many orders
  orders            order_details[]
}

model product_categories {
  id          String     @id @default(uuid())
  name        String     @unique
  description String?
  // A ProductCategory can has many Image
  images      images[]
  createdAt   DateTime   @default(now()) @map(name: "created_ at")
  modifiedAt  DateTime   @updatedAt @map(name: "modified_at")
  deletedAt   DateTime   @default(now()) @map(name: "deleted_at")
  // A ProductCategory can has many products
  products    products[]
}

model product_inventory {
  id         String   @id @default(uuid())
  quantity   Int
  createdAt  DateTime @default(now()) @map(name: "created_ at")
  modifiedAt DateTime @updatedAt @map(name: "modified_at")
  deletedAt  DateTime @default(now()) @map(name: "deleted_at")
  // A ProductInventory can only has one Product
  product    products @relation(fields: [productId], references: [id])
  productId  String   @unique
}

model discounts {
  id          String     @id @default(uuid())
  name        String     @unique
  description String?
  // A Discount can has many Product
  product     products[]
}

//*****Articles schema*****
model articles {
  id         String             @id @default(uuid())
  title      String             @unique
  content    String?
  published  Boolean            @default(false)
  createdAt  DateTime           @default(now()) @map(name: "created_at")
  modifiedAt DateTime           @updatedAt @map(name: "modified_at")
  deletedAt  DateTime           @default(now()) @map(name: "deleted_at")
  // An Article can has many Image
  image      images[]
  // An Article can has many ArticleCategory
  category   article_categories @relation(fields: [categoryId], references: [id])
  categoryId String

  @@index([id, title])
}

model article_categories {
  id         String     @id @default(uuid())
  name       String     @unique
  createdAt  DateTime   @default(now()) @map(name: "created_at")
  modifiedAt DateTime   @updatedAt @map(name: "modified_at")
  deletedAt  DateTime   @default(now()) @map(name: "deleted_at")
  // An ArticleCategory can has many Articles
  articles   articles[]
}

//*****Users schema*****
model users {
  id         String   @id @default(uuid())
  name       String?
  email      String   @unique
  createdAt  DateTime @default(now()) @map(name: "created_at")
  modifiedAt DateTime @updatedAt @map(name: "modified_at")
  deletedAt  DateTime @default(now()) @map(name: "deleted_at")
}

//*****ShippingInformation schema*****
model shipping_information {
  id         String         @id @default(uuid())
  name       String
  lastName   String
  email      String
  phone      String
  provincie  String
  city       String
  postalCode String
  address    String
  comment    String?
  createdAt  DateTime       @default(now()) @map(name: "created_at")
  modifiedAt DateTime       @updatedAt @map(name: "modified_at")
  //A shipping information can only be attached to one order
  order      order_details?
}

//*****BillingInformation schema*****
model billing_information {
  id         String         @id @default(uuid())
  name       String
  lastName   String
  email      String
  phone      String
  cif        String?
  provincie  String
  city       String
  postalCode String
  address    String
  createdAt  DateTime       @default(now()) @map(name: "created_at")
  modifiedAt DateTime       @updatedAt @map(name: "modified_at")
  //A billing information can only be attached to one order
  order      order_details?
}

//*****OrderDetails schema*****
model order_details {
  id                String               @id @default(uuid())
  // An order can only has a customer
  shippingInfo      shipping_information @relation(fields: [shippingInfoId], references: [id])
  shippingInfoId    String               @unique
  // An order can only has a customer
  billingInfo       billing_information  @relation(fields: [billingInfoId], references: [id])
  billingInfoId     String               @unique
  // An order can has many products
  products          products[]
  amount            Int
  // An order can only has one order number
  orderNumber       order_number         @relation(fields: [orderNumberId], references: [id])
  orderNumberId     String               @unique
  paymentStatus     payment_status
  //An order details can only has one shipping details attached
  shippingDetails   shipping_details     @relation(fields: [shippingDetailsId], references: [id])
  shippingDetailsId String               @unique
  createdAt         DateTime             @default(now()) @map(name: "created_at")
  modifiedAt        DateTime             @updatedAt @map(name: "modified_at")
  deletedAt         DateTime             @default(now()) @map(name: "deleted_at")
}

//*****OrderNumer schema*****
model shipping_details {
  id              String           @id @default(uuid())
  shippingMode    shipping_modes
  sendedAt        DateTime?
  deliveredAt     DateTime?
  shippingProcess shipping_process
  //A shipping details can only be attached to one order details
  order           order_details?
  createdAt       DateTime         @default(now()) @map(name: "created_at")
  modifiedAt      DateTime         @updatedAt @map(name: "modified_at")
}

enum shipping_modes {
  STAN //Standard method
  EXPR //Express method
}

enum shipping_process {
  NOTS //Not sended yet
  SEND //Sended
  DELV //Delivered
}

//*****OrderNumer schema*****
model order_number {
  id           String         @id @default(uuid())
  number       String         @unique
  createdAt    DateTime       @default(now()) @map(name: "created_at")
  // An order number can only be attached to one order details
  orderDetails order_details?

  @@index([id, number])
}

//*****PaymentDetails schema*****
//model payment_details {
//  id         String         @id @default(uuid())
//  amount     Int
//  provider   String
//  status     payment_status
//  createdAt  DateTime       @default(now()) @map(name: "created_at")
//  modifiedAt DateTime       @updatedAt @map(name: "modified_at")
//}

enum payment_status {
  COMP //Completed: A payment has been complete successfuly
  PEND //Pending: A payment is pending for w/e reason
  PROS //Processed: A payment has been accepted
  FAIL //Failed: A payment has been failed
}

//*****FAQ cuestions*****
model faq_category {
  id             String         @id @default(uuid())
  title          String         @unique
  icon           String
  themeCuestions faq_cuestion[]
}

model faq_cuestion {
  id                 String       @id @default(uuid())
  cuestion           String
  content            String?
  cuestionCategory   faq_category @relation(fields: [cuestionCategoryId], references: [id])
  cuestionCategoryId String
}
