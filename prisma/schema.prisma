generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

//Image schema

model images {
  id               Int                  @id @default(autoincrement())
  url              String
  alt              String
  // An Image can has many Product
  product          products[]
  // An Image can only be relate to one ArticleMainImage
  articleMainImage article_main_images?
  // An Image can has many Article
  article          articles[]
  // An Image can has many ProductCategory
  productCategory  product_categories[]

  @@index([id, url])
}

model article_main_images {
  id      Int       @id @default(autoincrement())
  // An articleMainImage can only be relate to one Image
  image   images    @relation(fields: [imageId], references: [id])
  imageId Int       @unique
  // An articleMainImage can only be relate to one Article
  article articles?
}

//Product schema

model products {
  id                Int                 @id @default(autoincrement())
  name              String
  description       String?
  price             Decimal             @db.Decimal(5, 2)
  createdAt         DateTime            @default(now()) @map(name: "created_ at")
  modifiedAt        DateTime            @updatedAt @map(name: "modified_at")
  deletedAt         DateTime            @default(now()) @map(name: "deleted_at")
  // An Product can have many Image
  image             images[]
  // A Product can only have one ProductCategory
  productCategory   product_categories? @relation(fields: [productCategoryId], references: [id])
  productCategoryId Int
  // A Product can only has one ProductInventory
  productInventory  product_inventory?
  // A Product can have many Discounts
  discount          discounts[]
}

model product_categories {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  // A ProductCategory can has many Image
  images      images[]
  createdAt   DateTime   @default(now()) @map(name: "created_ at")
  modifiedAt  DateTime   @updatedAt @map(name: "modified_at")
  deletedAt   DateTime   @default(now()) @map(name: "deleted_at")
  // A ProductCategory can has many products
  products    products[]
}

model product_inventory {
  id         Int      @id @default(autoincrement())
  quantity   Int
  createdAt  DateTime @default(now()) @map(name: "created_ at")
  modifiedAt DateTime @updatedAt @map(name: "modified_at")
  deletedAt  DateTime @default(now()) @map(name: "deleted_at")
  // A ProductInventory can only has one Product
  product    products @relation(fields: [productId], references: [id])
  productId  Int      @unique
}

model discounts {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  // A Discount can has many Product
  product     products[]
}

//Articles schema

model articles {
  id          Int                  @id @default(autoincrement())
  title       String               @unique
  content     String?
  published   Boolean              @default(false)
  createdAt   DateTime             @default(now()) @map(name: "created_at")
  modifiedAt  DateTime             @updatedAt @map(name: "modified_at")
  deletedAt   DateTime             @default(now()) @map(name: "deleted_at")
  // an Article can onyl has one ArticleMainImage
  mainImage   article_main_images  @relation(fields: [mainImageId], references: [id])
  mainImageId Int                  @unique
  // An Article can has many Image
  image       images[]
  // An Article can has many ArticleCategory
  categories  article_categories[]

  @@index([title, content])
}

model article_categories {
  id         Int        @id @default(autoincrement())
  name       String     @unique
  createdAt  DateTime   @default(now()) @map(name: "created_at")
  modifiedAt DateTime   @updatedAt @map(name: "modified_at")
  deletedAt  DateTime   @default(now()) @map(name: "deleted_at")
  // An ArticleCategory can has many Articles
  articles   articles[]
}

//Users schema

model users {
  id         Int      @id @default(autoincrement())
  name       String
  email      String   @unique
  createdAt  DateTime @default(now()) @map(name: "created_at")
  modifiedAt DateTime @updatedAt @map(name: "modified_at")
  deletedAt  DateTime @default(now()) @map(name: "deleted_at")
}

//OrderDetails schema

model order_details {
  id               Int      @id @default(autoincrement())
  customerName     String
  customerLastName String
  phone            String
  email            String
  address          String
  provincie        String
  city             String
  comment          String?
  amount           Decimal  @db.Decimal(6, 2)
  createdAt        DateTime @default(now()) @map(name: "created_at")
  modifiedAt       DateTime @updatedAt @map(name: "modified_at")
}

//PaymentDetails schema

model payment_details {
  id         Int            @id @default(autoincrement())
  amount     Decimal        @db.Decimal(6, 2)
  provider   String
  status     payment_status
  createdAt  DateTime       @default(now()) @map(name: "created_at")
  modifiedAt DateTime       @updatedAt @map(name: "modified_at")
}

enum payment_status {
  OPEN
  CLOS
  PEND
  PROG
}
