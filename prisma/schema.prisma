generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

//Image schema

model images {
  id                String              @id @default(uuid())
  url               String              @unique
  alt               String
  height            Int?
  width             Int?
  // An Image can has onyly one Product
  product           products?
  // An Image can has only one Article
  article           articles?           @relation(fields: [articleId], references: [id])
  articleId         String?             @unique
  // An Image can has only one ProductCategory
  productCategory   product_categories? @relation(fields: [productCategoryId], references: [id])
  productCategoryId String?

  @@index([id, url])
}

//Product schema

model products {
  id                String             @id @default(uuid())
  name              String             @unique
  description       String?
  price             Int
  createdAt         DateTime           @default(now()) @map(name: "created_ at")
  modifiedAt        DateTime           @updatedAt @map(name: "modified_at")
  deletedAt         DateTime           @default(now()) @map(name: "deleted_at")
  // An Product can have many Image
  image             images             @relation(fields: [imageId], references: [id])
  imageId           String             @unique
  // A Product can only have one ProductCategory
  productCategory   product_categories @relation(fields: [productCategoryId], references: [id])
  productCategoryId String
  // A Product can only has one ProductInventory
  productInventory  product_inventory?
  // A Product can have many Discounts
  discount          discounts[]
}

model product_categories {
  id          String     @id @default(uuid())
  name        String     @unique
  description String?
  // A ProductCategory can has many Image
  images      images[]
  createdAt   DateTime   @default(now()) @map(name: "created_ at")
  modifiedAt  DateTime   @updatedAt @map(name: "modified_at")
  deletedAt   DateTime   @default(now()) @map(name: "deleted_at")
  // A ProductCategory can has many products
  products    products[]
}

model product_inventory {
  id         String   @id @default(uuid())
  quantity   Int
  createdAt  DateTime @default(now()) @map(name: "created_ at")
  modifiedAt DateTime @updatedAt @map(name: "modified_at")
  deletedAt  DateTime @default(now()) @map(name: "deleted_at")
  // A ProductInventory can only has one Product
  product    products @relation(fields: [productId], references: [id])
  productId  String   @unique
}

model discounts {
  id          String     @id @default(uuid())
  name        String     @unique
  description String?
  // A Discount can has many Product
  product     products[]
}

//Articles schema

model articles {
  id         String             @id @default(uuid())
  title      String             @unique
  content    String?
  published  Boolean            @default(false)
  createdAt  DateTime           @default(now()) @map(name: "created_at")
  modifiedAt DateTime           @updatedAt @map(name: "modified_at")
  deletedAt  DateTime           @default(now()) @map(name: "deleted_at")
  // An Article can has many Image
  image      images[]
  // An Article can has many ArticleCategory
  category   article_categories @relation(fields: [categoryId], references: [id])
  categoryId String

  @@index([id, title])
}

model article_categories {
  id         String     @id @default(uuid())
  name       String     @unique
  createdAt  DateTime   @default(now()) @map(name: "created_at")
  modifiedAt DateTime   @updatedAt @map(name: "modified_at")
  deletedAt  DateTime   @default(now()) @map(name: "deleted_at")
  // An ArticleCategory can has many Articles
  articles   articles[]
}

//Users schema

model users {
  id         String   @id @default(uuid())
  name       String
  email      String   @unique
  createdAt  DateTime @default(now()) @map(name: "created_at")
  modifiedAt DateTime @updatedAt @map(name: "modified_at")
  deletedAt  DateTime @default(now()) @map(name: "deleted_at")
}

//OrderDetails schema

model order_details {
  id               String           @id @default(uuid())
  customerName     String
  customerLastName String
  phone            String
  email            String
  address          String
  provincie        String
  city             String
  comment          String?
  amount           Int
  createdAt        DateTime         @default(now()) @map(name: "created_at")
  modifiedAt       DateTime         @updatedAt @map(name: "modified_at")
  paymentDetails   payment_details?
}

//PaymentDetails schema

model payment_details {
  id             String         @id @default(uuid())
  amount         Int
  provider       String
  status         payment_status
  createdAt      DateTime       @default(now()) @map(name: "created_at")
  modifiedAt     DateTime       @updatedAt @map(name: "modified_at")
  orderDetaisl   order_details  @relation(fields: [orderDetailsId], references: [id])
  orderDetailsId String         @unique
}

enum payment_status {
  OPEN
  CLOS
  PEND
  PROG
}

//FAQ cuestions

model faq_category {
  id             String         @id @default(uuid())
  title          String         @unique
  icon           String
  themeCuestions faq_cuestion[]
}

model faq_cuestion {
  id                 String       @id @default(uuid())
  cuestion           String
  content            String?
  cuestionCategory   faq_category @relation(fields: [cuestionCategoryId], references: [id])
  cuestionCategoryId String
}
